{"version":3,"sources":["client.js","Root.js","routes.js","redux/modules/auth.js","containers/index.js","containers/App/App.js","config.js","containers/MapList/MapList.js","components/index.js","components/MapCanvas/MapCanvas.js","helpers/MapHelpers.js","components/MapListItem/MapListItem.js","redux/modules/maps.js","containers/Login/Login.js","containers/Admin/Admin.js","containers/MapView/MapView.js","containers/LiveMap/LiveMap.js","redux/modules/live.js","containers/NotFound/NotFound.js","redux/create.js","redux/middleware/clientMiddleware.js","redux/modules/reducer.js","helpers/ApiClient.js","packages/default"],"names":["global","__CLIENT__","__SERVER__","__DEVELOPMENT__","env","NODE_ENV","client","dest","document","getElementById","window","store","__data","history","render","RootElement","Root","props","item","deferred","Date","propTypes","object","isRequired","requireLogin","nextState","replace","cb","checkAuth","getState","user","auth","dispatch","then","reducer","isLoaded","isAuthenticated","load","login","logout","LOAD","LOAD_SUCCESS","LOAD_FAIL","LOGIN","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","LOGOUT_SUCCESS","LOGOUT_FAIL","initialState","loaded","state","action","type","loading","result","error","loggingIn","loginError","loggingOut","logoutError","globalState","types","promise","get","username","password","post","data","App","MapList","MapView","LiveMap","Login","NotFound","Admin","Container","div","UserBar","promises","push","Promise","all","pushState","handleLogout","event","preventDefault","initialize","analytics","debug","pageview","location","pathname","nextProps","children","func","contextTypes","environment","development","isProduction","production","module","exports","Object","assign","host","HOST","port","PORT","apiHost","APIHOST","apiPort","APIPORT","databaseUri","DATABASE_URI","sessionSecret","SESSION_SECRET","sessionTimeoutDays","SESSION_TIMEOUT","tokenSecret","TOKEN_SECRET","USERNAME","PASSWORD","ANALYTICS","live","url","LIVEURL","lead","LIVELEADID","group","LIVEGROUPID","interval","LIVEUPDATE","dateFormatAPI","dateFormatUI","app","title","description","head","titleTemplate","meta","name","content","charset","property","maps","items","map","i","array","MapCanvas","MapListItem","icons","first","last","sprint","com","food","mapInited","setState","course","bounds","google","LatLngBounds","forEach","p","point","LatLng","extend","refs","fitBounds","markers","activeMarkers","height","onMapInit","bind","styles","renderMarker","marker","position","icon","renderActiveMarker","key","x","y","width","toGeoJSON","pinSymbol","svgSymbol","pointToLngLat","arrayExplode","coordinates","geometry","color","path","fillColor","fillOpacity","strokeColor","strokeWeight","strokeOpacity","scale","anchor","size","scaledSize","lng","lat","arr","length","editAction","removeAction","_id","date","format","date_end","loadOne","add","edit","remove","LOADONE","LOADONE_SUCCESS","LOADONE_FAIL","ADD","ADD_SUCCESS","ADD_FAIL","EDIT","EDIT_SUCCESS","EDIT_FAIL","REMOVE","REMOVE_SUCCESS","REMOVE_FAIL","found","find","prevItem","filter","id","put","del","handleChange","target","value","handleSubmit","Input","input","TextArea","textarea","Button","button","Block","Label","label","addMap","editMap","showForm","handleChangeDate","toDate","catch","err","handleNew","m","hour","minute","seconds","millisecond","features","JSON","stringify","handleRemove","handleEdit","handleCancel","other","renderForm","params","ownProps","feature","properties","Map","Bar","Title","strong","Live","updateLive","socketListener","liveupdate","console","log","socket","on","disconnect","leadElapsed","groupElapsed","message","isBefore","getElapsed","formatDistance","Math","abs","dist","toFixed","snapped","sliced","UPDATE_LIVE","liveinfo","createStore","reduxRouterMiddleware","middleware","finalCreateStore","createLogger","require","devToolsExtension","clientMiddleware","next","rest","REQUEST","SUCCESS","FAILURE","actionPromise","routing","reduxAsyncConnect","methods","formatUrl","adjustedPath","ApiClient","req","method","resolve","reject","request","query","set","send","end","body"],"mappings":"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":"","sourcesContent":["import process from 'process'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {browserHistory} from 'react-router'\nimport {syncHistoryWithStore} from 'react-router-redux'\n\nimport Root from './Root'\nimport createStore from './redux/create'\nimport ApiClient from './helpers/ApiClient'\n\nglobal.__CLIENT__ = true\nglobal.__SERVER__ = false\nglobal.__DEVELOPMENT__ = process.env.NODE_ENV !== 'production'\n\nconst client = new ApiClient()\nconst dest = document.getElementById('content')\nwindow.store = window.store || createStore(browserHistory, client, window.__data)\nconst history = syncHistoryWithStore(browserHistory, window.store)\n\nrender(Root)\n\nfunction render (RootElement) {\n  ReactDOM.render(\n    <RootElement store={window.store} client={client} history={history} />,\n    dest\n  )\n}\n","import React, {PropTypes} from 'react'\nimport {Provider} from 'react-redux'\nimport {Router} from 'react-router'\nimport {ReduxAsyncConnect} from 'redux-connect'\nimport getRoutes from './routes'\n\nconst Root = ({store, client, history}) => {\n  return (\n    <Provider store={store} key='provider'>\n      <Router render={(props) =>\n        <ReduxAsyncConnect {...props} helpers={{client}} filter={(item) => !item.deferred} />\n          } history={history} key={new Date()}>\n        {getRoutes(store)}\n      </Router>\n    </Provider>\n  )\n}\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n  client: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}\n\nexport default Root\n","import React from 'react'\nimport {Route, IndexRoute} from 'react-router'\nimport {isLoaded as isAuthLoaded, load as loadAuth} from './redux/modules/auth'\nimport {\n    App,\n    MapList,\n    MapView,\n    LiveMap,\n    Login,\n    NotFound,\n    Admin\n} from './containers'\n\nexport default (store) => {\n  const requireLogin = (nextState, replace, cb) => {\n    function checkAuth () {\n      const {auth: { user }} = store.getState()\n      if (!user) {\n        replace('/login')\n      }\n      cb()\n    }\n\n    if (!isAuthLoaded(store.getState())) {\n      store.dispatch(loadAuth()).then(checkAuth)\n    } else {\n      checkAuth()\n    }\n  }\n\n  return (\n    <Route path='/' component={App}>\n      <IndexRoute component={LiveMap} />\n      <Route path='/maps' component={MapList} />\n      <Route path='/maps/:id' component={MapView} />\n      <Route onEnter={requireLogin}>\n        <Route path='/admin' component={Admin} />\n      </Route>\n      <Route path='login' component={Login} />\n      <Route path='*' component={NotFound} status={404} />\n    </Route>\n  )\n}\n","const LOAD = 'livemaps/auth/LOAD'\nconst LOAD_SUCCESS = 'livemaps/auth/LOAD_SUCCESS'\nconst LOAD_FAIL = 'livemaps/auth/LOAD_FAIL'\nconst LOGIN = 'livemaps/auth/LOGIN'\nconst LOGIN_SUCCESS = 'livemaps/auth/LOGIN_SUCCESS'\nconst LOGIN_FAIL = 'livemaps/auth/LOGIN_FAIL'\nconst LOGOUT = 'livemaps/auth/LOGOUT'\nconst LOGOUT_SUCCESS = 'livemaps/auth/LOGOUT_SUCCESS'\nconst LOGOUT_FAIL = 'livemaps/auth/LOGOUT_FAIL'\n\nconst initialState = {\n  loaded: false\n}\n\nexport default function reducer (state = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        loading: true\n      }\n    case LOAD_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        user: action.result\n      }\n    case LOAD_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error\n      }\n    case LOGIN:\n      return {\n        ...state,\n        loggingIn: true\n      }\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggingIn: false,\n        user: action.result\n      }\n    case LOGIN_FAIL:\n      return {\n        ...state,\n        loggingIn: false,\n        user: null,\n        loginError: action.error\n      }\n    case LOGOUT:\n      return {\n        ...state,\n        loggingOut: true\n      }\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        loggingOut: false,\n        user: null\n      }\n    case LOGOUT_FAIL:\n      return {\n        ...state,\n        loggingOut: false,\n        logoutError: action.error\n      }\n    default:\n      return state\n  }\n}\n\nexport function isLoaded (globalState) {\n  return globalState.auth && globalState.auth.loaded\n}\n\nexport function isAuthenticated (globalState) {\n  return globalState.auth && globalState.auth.user\n}\n\nexport function load () {\n  return {\n    types: [LOAD, LOAD_SUCCESS, LOAD_FAIL],\n    promise: (client) => client.get('/user/load')\n  }\n}\n\nexport function login (username, password) {\n  return {\n    types: [LOGIN, LOGIN_SUCCESS, LOGIN_FAIL],\n    promise: (client) => client.post('/user/login', {\n      data: {\n        username: username,\n        password: password\n      }\n    })\n  }\n}\n\nexport function logout () {\n  return {\n    types: [LOGOUT, LOGOUT_SUCCESS, LOGOUT_FAIL],\n    promise: (client) => client.post('/user/logout')\n  }\n}\n","import App from './App/App'\nimport MapList from './MapList/MapList'\nimport Login from './Login/Login'\nimport Admin from './Admin/Admin'\nimport MapView from './MapView/MapView'\nimport LiveMap from './LiveMap/LiveMap'\nimport NotFound from './NotFound/NotFound'\n\nexport {\n  App,\n  MapList,\n  MapView,\n  LiveMap,\n  Login,\n  NotFound,\n  Admin\n}\n","import React, {Component, PropTypes} from 'react'\nimport {connect} from 'react-redux'\nimport {asyncConnect} from 'redux-connect'\nimport {Link} from 'react-router'\nimport {push} from 'react-router-redux'\nimport ga from 'react-ga'\nimport styled, {injectGlobal} from 'styled-components'\n\nimport {isLoaded as isAuthLoaded, load as loadAuth, logout} from '../../redux/modules/auth'\nimport config from '../../config'\n\ninjectGlobal`\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  html,\n  body {\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    background: #333;\n    font-family: sans-serif;\n    color: #fff;\n  }\n  a {\n    color: #fff;\n  }\n  body > div {\n    height: 100%;\n  }\n  p {\n    margin-bottom: 10px;\n  }\n`\n\nconst Container = styled.div`\n  height: 100%;\n`\n\nconst UserBar = styled.div`\n  z-index: 100;\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 5px 10px;\n  color: #fff;\n  background: #333;\n  font-size: 12px;\n`\n\n@asyncConnect([{\n  promise: ({store: {dispatch, getState}}) => {\n    const promises = []\n    if (!isAuthLoaded(getState())) {\n      promises.push(dispatch(loadAuth()))\n    }\n    return Promise.all(promises)\n  }\n}])\n@connect(\n  (state) => ({\n    user: state.auth.user\n  }),\n  {\n    pushState: push,\n    logout\n  }\n)\nexport default class App extends Component {\n  static propTypes = {\n    children: PropTypes.object.isRequired,\n    user: PropTypes.object,\n    pushState: PropTypes.func.isRequired\n  }\n\n  static contextTypes = {\n    store: PropTypes.object.isRequired\n  }\n\n  handleLogout = (event) => {\n    event.preventDefault()\n    this.props.logout()\n  }\n\n  componentDidMount () {\n    ga.initialize(config.analytics, { debug: false })\n    ga.pageview(this.props.location.pathname)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (!this.props.user && nextProps.user) {\n      this.props.pushState('/admin')\n    } else if (this.props.user && !nextProps.user) {\n      this.props.pushState('/')\n    }\n    if (nextProps.location.pathname !== this.props.location.pathname) {\n      ga.pageview(nextProps.location.pathname)\n    }\n  }\n\n  render () {\n    const {user} = this.props\n    return (\n      <Container>\n        {user && (\n          <UserBar>\n            <Link to='/'>Live</Link>\n            <Link to='/maps'>Maps</Link>\n            <Link to='/admin'>Admin</Link>\n            Logged in as {user.username}\n            <button onClick={this.handleLogout}>Logout</button>\n          </UserBar>\n        )}\n        {this.props.children}\n      </Container>\n    )\n  }\n}\n","import process from 'process'\n\nconst environment = {\n  development: {\n    isProduction: false\n  },\n  production: {\n    isProduction: true\n  }\n}[process.env.NODE_ENV || 'development']\n\nmodule.exports = Object.assign({\n  host: process.env.HOST || 'localhost',\n  port: process.env.PORT,\n  apiHost: process.env.APIHOST || 'localhost',\n  apiPort: process.env.APIPORT,\n  databaseUri: process.env.DATABASE_URI || 'mongodb://localhost:27017/livemaps',\n  sessionSecret: process.env.SESSION_SECRET || 'supersecret',\n  sessionTimeoutDays: process.env.SESSION_TIMEOUT || 7,\n  tokenSecret: process.env.TOKEN_SECRET || 'supersecret',\n  username: process.env.USERNAME || 'admin',\n  password: process.env.PASSWORD || 'secret',\n  analytics: process.env.ANALYTICS || 'UA-46727144-10',\n  live: {\n    url: process.env.LIVEURL || 'http://bikemaster.no/gpsdata/lastgpsposition.xml',\n    lead: process.env.LIVELEADID || '3',\n    group: process.env.LIVEGROUPID || '4',\n    interval: process.env.LIVEUPDATE || '15 seconds'\n  },\n  dateFormatAPI: 'YYYY-MM-DDTHH:mm:ss.SSSZZ',\n  dateFormatUI: 'DD. MMM HH:mm',\n  app: {\n    title: 'Livemaps',\n    description: 'En beskrivelse',\n    head: {\n      titleTemplate: 'Livemaps: %s',\n      meta: [\n        {name: 'description', content: 'Dine oppgaver..'},\n        {charset: 'utf-8'},\n        {property: 'og:site_name', content: 'Livemaps'},\n        {property: 'og:image', content: ''},\n        {property: 'og:locale', content: 'nb_NO'},\n        {property: 'og:title', content: 'Livemaps'},\n        {property: 'og:description', content: 'Dine oppgaver..'},\n        {property: 'og:card', content: 'summary'},\n        {property: 'og:site', content: '@interspons'},\n        {property: 'og:creator', content: '@interspons'},\n        {property: 'og:image:width', content: '200'},\n        {property: 'og:image:height', content: '200'}\n      ]\n    }\n  }\n}, environment)\n","import React, {Component, PropTypes} from 'react'\nimport {connect} from 'react-redux'\nimport {asyncConnect} from 'redux-connect'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\n\nimport {MapListItem} from '../../components'\nimport {isLoaded, load as loadMaps} from '../../redux/modules/maps'\n\nconst Container = styled.div`\n  padding: 40px;\n`\n\n@asyncConnect([{\n  promise: ({store: {dispatch, getState}}) => {\n    const promises = []\n    if (!isLoaded(getState())) {\n      promises.push(dispatch(loadMaps()))\n    }\n    return Promise.all(promises)\n  }\n}])\n@connect(\n  (state) => ({\n    maps: state.maps.items\n  })\n)\nexport default class MapList extends Component {\n  static propTypes = {\n    maps: PropTypes.array\n  }\n\n  render () {\n    const {maps} = this.props\n    return (\n      <Container>\n        <Helmet title='Maps' />\n        <h1>Maps</h1>\n        {maps.map((item, i) => {\n          return (\n            <MapListItem key={i} item={item} />\n          )\n        })}\n      </Container>\n    )\n  }\n}\n","import MapCanvas from './MapCanvas/MapCanvas'\nimport MapListItem from './MapListItem/MapListItem'\n\nexport {\n  MapCanvas,\n  MapListItem\n}\n","import React, {Component, PropTypes} from 'react'\nimport {GoogleMapLoader, GoogleMap, Polyline, Marker} from 'react-google-maps'\nimport styled from 'styled-components'\n\nimport mapStyle from './mapstyle.json'\nimport {svgSymbol, pointToLngLat, arrayExplode} from '../../helpers/MapHelpers'\n\nconst icons = {\n  first: '/icons/start.svg',\n  last: '/icons/end.svg',\n  sprint: '/icons/sprint.svg',\n  com: '/icons/com.svg',\n  food: '/icons/food.svg',\n  lead: '/icons/lead.svg',\n  group: '/icons/group.svg'\n}\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\nexport default class MapCanvas extends Component {\n  static propTypes = {\n    course: PropTypes.array.isRequired,\n    markers: PropTypes.array,\n    activeMarkers: PropTypes.array\n  }\n\n  state = {}\n\n  onMapInit () {\n    const {mapInited} = this.state\n    if (!mapInited) {\n      this.setState({mapInited: true}, () => {\n        const {course} = this.props\n        const bounds = new global.google.maps.LatLngBounds()\n        course.forEach((p) => {\n          const point = new global.google.maps.LatLng(pointToLngLat(p))\n          bounds.extend(point)\n        })\n        this.refs.map.fitBounds(bounds)\n      })\n    }\n  }\n\n  render () {\n    const {course, markers, activeMarkers} = this.props\n    const {first, last} = arrayExplode(course)\n    return (\n      <Container>\n        <GoogleMapLoader\n          containerElement={\n            <div style={{height: '100%'}} />\n          }\n          googleMapElement={\n            <GoogleMap\n              ref='map'\n              onIdle={this.onMapInit.bind(this)}\n              defaultZoom={4}\n              defaultOptions={{\n                styles: mapStyle\n              }}>\n              <Polyline\n                path={course.map((p) => pointToLngLat(p))}\n              />\n              {first && this.renderMarker(first, 'first')}\n              {last && this.renderMarker(last, 'last')}\n              {markers && markers.map((marker, i) => {\n                return this.renderMarker(marker.position, marker.icon, i)\n              })}\n              {activeMarkers && activeMarkers.map((marker, i) => {\n                return this.renderActiveMarker(marker.position, marker.icon, i)\n              })}\n            </GoogleMap>\n          }\n        />\n      </Container>\n    )\n  }\n\n  renderActiveMarker (position, icon = 'first', key) {\n    return (\n      <Marker key={key} position={pointToLngLat(position)} options={{icon: svgSymbol(icons[icon], {x: 0, y: 40}, {height: 40, width: 20})}} />\n    )\n  }\n\n  renderMarker (position, icon = 'first', key) {\n    return (\n      <Marker key={key} position={pointToLngLat(position)} options={{icon: svgSymbol(icons[icon])}} />\n    )\n  }\n}\n","export function toGeoJSON (coordinates, type = 'Point') {\n  return {\n    type: 'Feature',\n    geometry: {\n      type: type,\n      coordinates: coordinates\n    }\n  }\n}\n\nexport function pinSymbol (color = '#999999') {\n  return {\n    path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',\n    fillColor: color,\n    fillOpacity: 1,\n    strokeColor: '#000',\n    strokeWeight: 1,\n    strokeOpacity: 0.5,\n    scale: 1\n  }\n}\n\nexport function svgSymbol (url, anchor = {x: 16, y: 16}, size = {height: 24, width: 24}) {\n  return {\n    url: url,\n    anchor: anchor,\n    scaledSize: size\n  }\n}\n\nexport function pointToLngLat (p) {\n  return {\n    lng: p[0],\n    lat: p[1]\n  }\n}\n\nexport function arrayExplode (arr = []) {\n  return {\n    first: arr.length > 0 ? arr[0] : null,\n    last: arr.length > 0 ? arr[arr.length - 1] : null\n  }\n}\n","import React, {Component, PropTypes} from 'react'\nimport {Link} from 'react-router'\nimport styled from 'styled-components'\nimport moment from 'moment'\n\nimport config from '../../config'\n\nconst Container = styled.div`\n  padding: 4px 8px;\n  margin-bottom: 10px;\n  border-left: 3px solid #999;\n`\n\nexport default class MapListItem extends Component {\n  static propTypes = {\n    item: PropTypes.object.isRequired,\n    editAction: PropTypes.func,\n    removeAction: PropTypes.func\n  }\n\n  render () {\n    const {item, editAction, removeAction} = this.props\n    return (\n      <Container>\n        <Link to={`/maps/${item._id}`}>{item.title}</Link>\n        {moment(item.date).format(config.dateFormatUI)} -\n        {moment(item.date_end).format(config.dateFormatUI)}\n        {editAction && (\n          <button onClick={editAction.bind(this, item)}>Edit</button>\n        )}\n        {removeAction && (\n          <button onClick={removeAction.bind(this, item)}>Remove</button>\n        )}\n      </Container>\n    )\n  }\n}\n","const LOAD = 'livemaps/maps/LOAD'\nconst LOAD_SUCCESS = 'livemaps/maps/LOAD_SUCCESS'\nconst LOAD_FAIL = 'livemaps/maps/LOAD_FAIL'\nconst LOADONE = 'livemaps/maps/LOADONE'\nconst LOADONE_SUCCESS = 'livemaps/maps/LOADONE_SUCCESS'\nconst LOADONE_FAIL = 'livemaps/maps/LOADONE_FAIL'\nconst ADD = 'livemaps/maps/ADD'\nconst ADD_SUCCESS = 'livemaps/maps/ADD_SUCCESS'\nconst ADD_FAIL = 'livemaps/maps/ADD_FAIL'\nconst EDIT = 'livemaps/maps/EDIT'\nconst EDIT_SUCCESS = 'livemaps/maps/EDIT_SUCCESS'\nconst EDIT_FAIL = 'livemaps/maps/EDIT_FAIL'\nconst REMOVE = 'livemaps/maps/REMOVE'\nconst REMOVE_SUCCESS = 'livemaps/maps/REMOVE_SUCCESS'\nconst REMOVE_FAIL = 'livemaps/maps/REMOVE_FAIL'\n\nconst initialState = {\n  loaded: false,\n  items: []\n}\n\nexport default function reducer (state = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        loading: true\n      }\n    case LOAD_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        items: action.result.map((item) => {\n          const found = state.items.find((prevItem) => prevItem._id === item._id)\n          if (found) {\n            return found\n          }\n          return item\n        })\n      }\n    case LOAD_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error\n      }\n    case LOADONE:\n      return {\n        ...state,\n        loading: true\n      }\n    case LOADONE_SUCCESS:\n      if (state.items.find((item) => item._id === action.result._id)) {\n        return {\n          ...state,\n          loading: false,\n          items: state.items.map((item) => {\n            if (item._id === action.result._id) {\n              return action.result\n            }\n            return item\n          })\n        }\n      } else {\n        return {\n          ...state,\n          loading: false,\n          items: [...state.items, action.result]\n        }\n      }\n    case LOADONE_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error\n      }\n    case ADD:\n    case EDIT:\n      return {\n        ...state,\n        loading: true\n      }\n    case ADD_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        items: [\n          ...state.items,\n          action.result\n        ]\n      }\n    case EDIT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        items: state.items.map((item) => {\n          if (item._id === action.result._id) {\n            return action.result\n          }\n          return item\n        })\n      }\n    case ADD_FAIL:\n    case EDIT_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      }\n    case REMOVE:\n      return {\n        ...state,\n        loading: true\n      }\n    /* We do not insert here, but let socket pipe the added item back to us */\n    case REMOVE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        items: state.items.filter((item) => item._id !== action.result._id)\n      }\n    case REMOVE_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      }\n    default:\n      return state\n  }\n}\n\nexport function isLoaded (globalState, id = null) {\n  if (id) {\n    return globalState.maps.items.find((item) => item._id === id) && globalState.maps.items.filter((item) => item._id === id).course\n  } else {\n    return globalState.maps && globalState.maps.loaded\n  }\n}\n\nexport function load () {\n  return {\n    types: [LOAD, LOAD_SUCCESS, LOAD_FAIL],\n    promise: (client) => client.get('/maps')\n  }\n}\n\nexport function loadOne (id) {\n  return {\n    types: [LOADONE, LOADONE_SUCCESS, LOADONE_FAIL],\n    promise: (client) => client.get(`/maps/${id}`)\n  }\n}\n\nexport function add (item) {\n  return {\n    types: [ADD, ADD_SUCCESS, ADD_FAIL],\n    promise: (client) => client.post('/maps', {\n      data: item\n    })\n  }\n}\nexport function edit (id, item) {\n  return {\n    types: [EDIT, EDIT_SUCCESS, EDIT_FAIL],\n    promise: (client) => client.put(`/maps/${id}`, {\n      data: item\n    })\n  }\n}\nexport function remove (id) {\n  return {\n    types: [REMOVE, REMOVE_SUCCESS, REMOVE_FAIL],\n    promise: (client) => client.del(`/maps/${id}`)\n  }\n}\n","import React, {Component, PropTypes} from 'react'\nimport {connect} from 'react-redux'\nimport Helmet from 'react-helmet'\n\nimport {login} from '../../redux/modules/auth'\n\n@connect(\n  (state) => ({\n    user: state.auth.user\n  }),\n  {\n    login\n  }\n)\nexport default class Login extends Component {\n  static propTypes = {\n    login: PropTypes.func.isRequired,\n    user: PropTypes.object\n  }\n\n  state = {\n    username: '',\n    password: ''\n  }\n\n  handleChange = (name, event) => {\n    this.setState({...this.state, [name]: event.target.value})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    const {username, password} = this.state\n    this.props.login(username, password)\n  }\n\n  render () {\n    const {user} = this.props\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Helmet title='Login' />\n        {!user && (\n          <p>\n            <input type='text' value={this.state.username} onChange={this.handleChange.bind(this, 'username')} placeholder='Username' />\n            <input type='password' value={this.state.password} onChange={this.handleChange.bind(this, 'password')} placeholder='Password' />\n            <button type='submit'>Login</button>\n          </p>\n        )}\n        {user && (\n          <p>\n            You are logged in as {user.username}\n          </p>\n        )}\n      </form>\n    )\n  }\n}\n","import React, {Component, PropTypes} from 'react'\nimport {connect} from 'react-redux'\nimport {asyncConnect} from 'redux-connect'\nimport Helmet from 'react-helmet'\nimport omit from 'object.omit'\nimport moment from 'moment'\nimport DateTime from 'react-datetime'\nimport styled from 'styled-components'\n\nimport {isLoaded, load as loadMaps, add as addMap, edit as editMap, remove} from '../../redux/modules/maps'\nimport config from '../../config'\nimport {MapListItem} from '../../components'\nimport featureDefault from './featureDefault.json'\n\nconst Container = styled.div`\n  padding: 40px;\n`\n\nconst Input = styled.input`\n  display: block;\n  margin: 3px;\n  padding: 5px;\n  width: 100%;\n`\n\nconst TextArea = styled.textarea`\n  display: block;\n  margin: 3px;\n  padding: 5px;\n  width: 100%;\n  min-height: 400px;\n`\n\nconst Button = styled.button`\n  display: inline-block;\n  margin: 3px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 1em;\n  max-width: 600px;\n`\n\nconst Label = styled.label`\n  display: block;\n`\n\n@asyncConnect([{\n  promise: ({store: {dispatch, getState}}) => {\n    const promises = []\n    if (!isLoaded(getState())) {\n      promises.push(dispatch(loadMaps()))\n    }\n    return Promise.all(promises)\n  }\n}])\n@connect(\n  (state) => ({\n    maps: state.maps.items,\n    error: state.maps.error,\n    loading: state.maps.loading\n  }),\n  {addMap, editMap, remove}\n)\nexport default class Admin extends Component {\n  static propTypes = {\n    maps: PropTypes.array\n  }\n\n  state = {\n    item: {},\n    showForm: false,\n    error: null\n  }\n\n  handleChange = (name, event) => {\n    this.setState({item: {...this.state.item, [name]: event.target.value}})\n  }\n\n  handleChangeDate = (name, value) => {\n    if (value.toDate) {\n      this.setState({item: {...this.state.item, [name]: value.toDate()}})\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    let {item} = this.state\n    if (item.date) {\n      item.date = moment(item.date).format(config.dateFormatAPI)\n    }\n    if (item.date_end) {\n      item.date_end = moment(item.date_end).format(config.dateFormatAPI)\n    }\n    const action = (item._id) ? this.props.editMap(item._id, item) : this.props.addMap(item)\n    action.then(() => {\n      this.setState({\n        showForm: false,\n        item: {}\n      })\n    })\n    .catch((err) => {\n      this.setState({\n        error: err\n      })\n    })\n  }\n\n  handleNew = () => {\n    const m = moment().add(2, 'day').hour(12).minute(0).seconds(0).millisecond(0)\n    this.setState({\n      showForm: true,\n      item: {\n        title: 'New map',\n        url: 'http://bikemaster.no/kmlDownload.asp?r=46',\n        date: m.toDate(),\n        date_end: moment(m).add(4, 'hour').toDate(),\n        features: JSON.stringify(featureDefault)\n      }\n    })\n  }\n\n  handleRemove = (item) => {\n    this.props.remove(item._id)\n  }\n\n  handleEdit = (item) => {\n    this.setState({\n      showForm: true,\n      item: Object.assign({}, omit(item, 'course'), {\n        date: moment(item.date).toDate(),\n        date_end: moment(item.date_end).toDate(),\n        features: item.features ? JSON.stringify(item.features) : ''\n      })\n    })\n  }\n\n  handleCancel = () => {\n    this.setState({\n      showForm: false,\n      item: {}\n    })\n  }\n\n  renderForm () {\n    const {item, error} = this.state\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {error && (\n          <p style={{color: 'red'}}>{error}</p>\n        )}\n        <Block>\n          <Label>Title</Label>\n          <Input type='text' value={item.title} onChange={this.handleChange.bind(this, 'title')} placeholder='Map title' />\n        </Block>\n        <Block>\n          <Label>Event start</Label>\n          <DateTime value={item.date} dateFormat='DD. MMM YYYY' timeFormat='HH:mm:ss' onChange={this.handleChangeDate.bind(this, 'date')} />\n        </Block>\n        <Block>\n          <Label>Event end</Label>\n          <DateTime value={item.date_end} dateFormat='DD. MMM YYYY' timeFormat='HH:mm:ss' onChange={this.handleChangeDate.bind(this, 'date_end')} />\n        </Block>\n        <Block>\n          <Label>GeoJSON feature collection</Label>\n          <TextArea value={item.features} onChange={this.handleChange.bind(this, 'features')} placeholder={JSON.stringify(featureDefault)} />\n        </Block>\n        <Block>\n          <Label>KML Url</Label>\n          <Input type='text' value={item.url} onChange={this.handleChange.bind(this, 'url')} placeholder='KML url' />\n          <Button type='submit'>Save</Button>\n          <span onClick={this.handleCancel.bind(this)}>Cancel</span>\n        </Block>\n      </form>\n    )\n  }\n\n  render () {\n    const {maps, error, loading} = this.props\n    const {showForm} = this.state\n    return (\n      <Container>\n        <Helmet title='Admin' />\n        <h1>Admin {this.state.other}</h1>\n        {error && (\n          <p style={{color: 'red'}}>{error}</p>\n        )}\n        {loading && (\n          <p style={{color: 'green'}}>Loading</p>\n        )}\n        {!showForm && (\n          <div>\n            <p>\n              <button onClick={this.handleNew.bind(this)}>New map</button>\n            </p>\n            {maps.map((item, i) => {\n              return (\n                <MapListItem key={i} item={item} editAction={this.handleEdit} removeAction={this.handleRemove} />\n              )\n            })}\n          </div>\n        )}\n        {showForm && this.renderForm()}\n      </Container>\n    )\n  }\n}\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {asyncConnect} from 'redux-connect'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\n\nimport {isLoaded, loadOne} from '../../redux/modules/maps'\nimport {MapCanvas} from '../../components'\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\n@asyncConnect([{\n  promise: ({\n    store: {dispatch, getState},\n    params: {id}\n  }) => {\n    const promises = []\n    if (!isLoaded(getState(), id)) {\n      promises.push(dispatch(loadOne(id)))\n    }\n    return Promise.all(promises)\n  }\n}])\n@connect(\n  (state, ownProps) => ({\n    map: state.maps.items.find((item) => item._id === ownProps.params.id),\n    error: state.maps.error\n  })\n)\nexport default class MapView extends Component {\n  render () {\n    const {title, course, features} = this.props.map\n    return (\n      <Container>\n        <Helmet title={title} />\n        {course.coordinates && (\n          <MapCanvas\n            course={course.coordinates}\n            markers={features.features ? features.features.map((feature) => {\n              return {\n                position: feature.geometry.coordinates,\n                icon: feature.properties.icon\n              }\n            }) : []}\n          />\n        )}\n      </Container>\n    )\n  }\n}\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {asyncConnect} from 'redux-connect'\nimport Helmet from 'react-helmet'\nimport PointOnLine from '@turf/point-on-line'\nimport LineSlice from '@turf/line-slice'\nimport LineDistance from '@turf/line-distance'\nimport io from 'socket.io-client'\nimport moment from 'moment'\nimport styled from 'styled-components'\n\nimport {isLoaded, load, updateLive} from '../../redux/modules/live'\nimport {toGeoJSON} from '../../helpers/MapHelpers'\nimport {MapCanvas} from '../../components'\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\nconst Map = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 40px;\n`\nconst Bar = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0px;\n  line-height: 40px;\n  font-size: 11px;\n  white-space: nowrap;\n  text-overlfow: ellipsis;\n  overflow: hidden;\n`\nconst Title = styled.strong`\n  color: #FFD634;\n  display: inline-block;\n  @media screen and (max-width: 600px) {\n    display: none;\n  }\n`\nconst Live = styled.strong`\n  background: #FFD634;\n  float:left;\n  line-height: 40px; \n  padding: 0 15px;\n  margin-right: 15px;\n  color: #000;\n`\n\n@asyncConnect([{\n  promise: ({store: {dispatch, getState}}) => {\n    const promises = []\n    if (!isLoaded(getState())) {\n      promises.push(dispatch(load()))\n    }\n    return Promise.all(promises)\n  }\n}])\n@connect(\n  (state, ownProps) => ({\n    map: state.live.item,\n    error: state.live.error\n  }),\n  {updateLive}\n)\nexport default class LiveMap extends Component {\n\n  state = {}\n\n  componentDidMount () {\n    if (__CLIENT__) {\n      this.socket = io('', {path: '/ws'})\n      this.socket.on('update', this.socketListener)\n    }\n  }\n\n  socketListener = (liveupdate) => {\n    if (console && console.log) {\n      console.log('ws update', liveupdate)\n    }\n    this.props.updateLive({\n      lead: liveupdate.lead,\n      group: liveupdate.group\n    })\n  }\n\n  componentWillUnmount () {\n    if (this.socket) {\n      this.socket.disconnect()\n    }\n  }\n\n  render () {\n    const {error} = this.props\n    if (error) {\n      return (\n        <Container>\n          <Helmet title={error} />\n          <div>\n            <h1>{error}</h1>\n          </div>\n        </Container>\n      )\n    }\n    const {title, course, date, features, live: {lead, group}} = this.props.map\n    const activeMarkers = []\n    let leadElapsed, groupElapsed\n    let message\n    if (moment().isBefore(date)) {\n      message = `Starts sending ${moment(date).format('ddd DD. MMM HH:mm:ss')}`\n    } else {\n      if (lead) {\n        activeMarkers.push({\n          position: lead,\n          icon: 'lead'\n        })\n        leadElapsed = this.getElapsed(course.coordinates, lead)\n        if (leadElapsed > 0) {\n          message = `Lead: ${this.formatDistance(leadElapsed)}`\n        }\n      }\n      if (group) {\n        activeMarkers.push({\n          position: group,\n          icon: 'group'\n        })\n        groupElapsed = this.getElapsed(course.coordinates, group)\n        if (leadElapsed > 0 && groupElapsed > 0) {\n          message += `, Group: ${this.formatDistance(Math.abs(leadElapsed - groupElapsed))} behind`\n        }\n      }\n      if (leadElapsed <= 0 || groupElapsed <= 0) {\n        message = 'GPS units not within track'\n      }\n    }\n    return (\n      <Container>\n        <Helmet title={title} />\n        {course.coordinates && (\n          <Map>\n            <MapCanvas\n              course={course.coordinates}\n              markers={features.features ? features.features.map((feature) => {\n                return {\n                  position: feature.geometry.coordinates,\n                  icon: feature.properties.icon\n                }\n              }) : []}\n              activeMarkers={activeMarkers}\n            />\n          </Map>\n        )}\n        <Bar>\n          <Live>LIVE</Live>\n          <Title>{title}</Title>{' '}\n          {message}\n        </Bar>\n      </Container>\n    )\n  }\n\n  formatDistance (dist) {\n    if (dist > 1) {\n      return `${dist.toFixed(2)} km`\n    }\n    return `${(dist * 1000).toFixed(2)} m`\n  }\n\n  getElapsed (coordinates, position) {\n    const course = toGeoJSON(coordinates, 'LineString')\n    const point = toGeoJSON(position)\n    const snapped = PointOnLine(course, point)\n    const sliced = LineSlice(toGeoJSON(coordinates[0]), snapped, course)\n    return LineDistance(sliced, 'kilometers')\n  }\n\n}\n","const LOAD = 'livemaps/live/LOAD'\nconst LOAD_SUCCESS = 'livemaps/live/LOAD_SUCCESS'\nconst LOAD_FAIL = 'livemaps/live/LOAD_FAIL'\nconst UPDATE_LIVE = 'livemaps/live/UPDATE_LIVE'\n\nconst initialState = {\n  loaded: false,\n  item: {}\n}\n\nexport default function reducer (state = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD:\n      return {\n        ...state,\n        loading: true\n      }\n    case LOAD_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        item: action.result\n      }\n    case LOAD_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error\n      }\n    case UPDATE_LIVE:\n      return {\n        ...state,\n        item: {...state.item, live: action.result}\n      }\n    default:\n      return state\n  }\n}\n\nexport function isLoaded (globalState, id = null) {\n  return globalState.live && globalState.live.loaded\n}\n\nexport function load () {\n  return {\n    types: [LOAD, LOAD_SUCCESS, LOAD_FAIL],\n    promise: (client) => client.get('/maps/live')\n  }\n}\n\nexport function updateLive (liveinfo) {\n  return {\n    type: UPDATE_LIVE,\n    result: liveinfo\n  }\n}\n","import React from 'react'\n\nexport default function NotFound () {\n  return (\n    <div>\n      <h1>Not found 404</h1>\n      <p>The page could not be found</p>\n    </div>\n  )\n}\n","import {createStore as _createStore, applyMiddleware, compose} from 'redux'\nimport createMiddleware from './middleware/clientMiddleware'\nimport {routerMiddleware} from 'react-router-redux'\nimport thunk from 'redux-thunk'\n\nimport reducer from './modules/reducer'\nexport default function createStore (history, client, data = {}) {\n  const reduxRouterMiddleware = routerMiddleware(history)\n  const middleware = [createMiddleware(client), reduxRouterMiddleware, thunk]\n  let finalCreateStore\n  if (__CLIENT__ && __DEVELOPMENT__) {\n    const createLogger = require('redux-logger')\n    finalCreateStore = compose(\n      applyMiddleware(...middleware),\n      global.devToolsExtension ? global.devToolsExtension() : applyMiddleware(createLogger())\n    )(_createStore)\n  } else {\n    finalCreateStore = applyMiddleware(...middleware)(_createStore)\n  }\n  const store = finalCreateStore(reducer, data)\n  return store\n}\n","export default function clientMiddleware (client) {\n  return ({dispatch, getState}) => {\n    return (next) => (action) => {\n      if (typeof action === 'function') {\n        return action(dispatch, getState)\n      }\n\n      const { promise, types, ...rest } = action // eslint-disable-line no-redeclare\n      if (!promise) {\n        return next(action)\n      }\n\n      const [REQUEST, SUCCESS, FAILURE] = types\n      next({...rest, type: REQUEST})\n\n      const actionPromise = promise(client)\n      actionPromise.then(\n        (result) => next({...rest, result, type: SUCCESS}),\n        (error) => next({...rest, error, type: FAILURE})\n      ).catch((error) => {\n        console.error('MIDDLEWARE ERROR:', error)\n        next({...rest, error, type: FAILURE})\n      })\n\n      return actionPromise\n    }\n  }\n}\n","import {combineReducers} from 'redux'\nimport {routerReducer} from 'react-router-redux'\nimport {reducer as reduxAsyncConnect} from 'redux-connect'\n\nimport auth from './auth'\nimport maps from './maps'\nimport live from './live'\n\nexport default combineReducers({\n  routing: routerReducer,\n  reduxAsyncConnect,\n  auth,\n  maps,\n  live\n})\n","import superagent from 'superagent'\nimport config from '../config'\n\nconst methods = ['get', 'post', 'put', 'patch', 'del']\n\nfunction formatUrl (path) {\n  const adjustedPath = path[0] !== '/' ? '/' + path : path\n  if (__SERVER__) {\n    // Prepend host and port of the API server to the path.\n    return 'http://' + config.apiHost + ':' + config.apiPort + adjustedPath\n  }\n  // Prepend `/api` to relative URL, to proxy to API server.\n  return '/api' + adjustedPath\n}\n\nexport default class ApiClient {\n  constructor (req) {\n    methods.forEach((method) => {\n      this[method] = (path, { params, data } = {}) => new Promise((resolve, reject) => {\n        const request = superagent[method](formatUrl(path))\n        if (params) {\n          request.query(params)\n        }\n\n        if (__SERVER__ && req.get('cookie')) {\n          request.set('cookie', req.get('cookie'))\n        }\n\n        if (data) {\n          request.send(data)\n        }\n\n        request.end((err, { body } = {}) => err ? reject(body.error || body || err) : resolve(body))\n      })\n    })\n  }\n  empty () {}\n}\n",null]}